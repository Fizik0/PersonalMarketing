import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import session from "express-session";
import type { Express, RequestHandler } from "express";
import connectPg from "connect-pg-simple";
import MemoryStore from 'memorystore';
import { storage } from "./storage";
import 'dotenv/config';

export function getSession() {
  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week
  
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStore –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ PostgreSQL
  if (process.env.NODE_ENV === 'development' && process.env.USE_MEMORY_SESSION === 'true') {
    console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ (MemoryStore)');
    const MemorySessionStore = MemoryStore(session);
    return session({
      secret: process.env.SESSION_SECRET || 'local-development-secret',
      resave: false,
      saveUninitialized: false,
      cookie: {
        httpOnly: true,
        secure: false,
        maxAge: sessionTtl,
      },
      store: new MemorySessionStore({
        checkPeriod: 86400000 // –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
      })
    });
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ PostgreSQL
  try {
    console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π –≤ PostgreSQL');
    const pgStore = connectPg(session);
    
    const sessionStore = new pgStore({
      conString: process.env.DATABASE_URL,
      createTableIfMissing: true, // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      ttl: sessionTtl,
      tableName: "sessions",
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Å–µ—Å—Å–∏–π
    sessionStore.on('error', (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π PostgreSQL:', error);
    });
    
    return session({
      secret: process.env.SESSION_SECRET || 'local-development-secret',
      store: sessionStore,
      resave: false,
      saveUninitialized: false,
      cookie: {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: sessionTtl,
      },
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π:', error);
    console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStore –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    const MemorySessionStore = MemoryStore(session);
    return session({
      secret: process.env.SESSION_SECRET || 'local-development-secret',
      resave: false,
      saveUninitialized: false,
      cookie: {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: sessionTtl,
      },
      store: new MemorySessionStore({
        checkPeriod: 86400000 // –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
      })
    });
  }
}

export async function setupAuth(app: Express) {
  app.set("trust proxy", 1);
  app.use(getSession());
  app.use(passport.initialize());
  app.use(passport.session());

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º LocalStrategy –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  passport.use(new LocalStrategy(
    { usernameField: 'email' },
    async (email, password, done) => {
      try {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –∫—Ä–µ–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
        if (process.env.NODE_ENV === 'development' && email === 'admin@example.com') {
          // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
          const adminUser = await storage.getUser('admin-user-id');
          if (adminUser) {
            return done(null, adminUser);
          }
          
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
          const newAdmin = await storage.upsertUser({
            id: 'admin-user-id',
            email: 'admin@example.com',
            firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            lastName: '–°–∏—Å—Ç–µ–º—ã',
            role: 'admin'
          });
          
          return done(null, newAdmin);
        }
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—ã –±—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –ø–∞—Ä–æ–ª—å, –Ω–æ –¥–ª—è –¥–µ–º–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        return done(null, false, { message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      } catch (error) {
        return done(error);
      }
    }
  ));

  passport.serializeUser((user: Express.User, cb) => cb(null, (user as any).id));
  passport.deserializeUser(async (id: string, cb) => {
    try {
      const user = await storage.getUser(id);
      cb(null, user);
    } catch (err) {
      cb(err);
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  app.post("/api/login", (req, res, next) => {
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', req.body.email);
    
    passport.authenticate("local", (err, user, info) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
        return res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ" });
      }
      
      if (!user) {
        console.warn("‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:", info?.message);
        return res.status(401).json({ message: info?.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      }
      
      req.logIn(user, (err) => {
        if (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏:", err);
          return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏" });
        }
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);
        return res.json({ success: true, user });
      });
    })(req, res, next);
  });

  // –û—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  app.get("/api/login", (req, res) => {
    if (req.isAuthenticated()) {
      console.log('üëã –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return res.redirect('/');
    }
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    if (process.env.NODE_ENV === 'development') {
      res.send(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</title>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
            body { font-family: Arial, sans-serif; max-width: 500px; margin: 0 auto; padding: 20px; }
            .form-group { margin-bottom: 15px; }
            label { display: block; margin-bottom: 5px; }
            input[type="email"], input[type="password"] { width: 100%; padding: 8px; box-sizing: border-box; }
            button { padding: 10px 15px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }
            .message { margin-top: 20px; padding: 10px; background-color: #f8f9fa; border-radius: 4px; }
          </style>
        </head>
        <body>
          <h1>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
          <div class="message">
            <p><strong>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong></p>
            <p>Email: admin@example.com</p>
            <p>–ü–∞—Ä–æ–ª—å: –ª—é–±–æ–π (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)</p>
          </div>
          <form id="loginForm" method="POST" action="/api/login">
            <div class="form-group">
              <label for="email">Email:</label>
              <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
              <label for="password">–ü–∞—Ä–æ–ª—å:</label>
              <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">–í–æ–π—Ç–∏</button>
          </form>
          <script>
            document.getElementById('loginForm').addEventListener('submit', async (e) => {
              e.preventDefault();
              
              const email = document.getElementById('email').value;
              const password = document.getElementById('password').value;
              
              try {
                const response = await fetch('/api/login', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ email, password })
                });
                
                if (response.ok) {
                  window.location.href = '/';
                } else {
                  const data = await response.json();
                  alert(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
                }
              } catch (err) {
                console.error('–û—à–∏–±–∫–∞:', err);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
              }
            });
          </script>
        </body>
        </html>
      `);
    } else {
      res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }
  });

  app.get("/api/logout", (req, res) => {
    req.logout(() => {
      res.redirect('/');
    });
  });
}

export const isAuthenticated: RequestHandler = async (req, res, next) => {
  if (!req.isAuthenticated()) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  
  return next();
}; 